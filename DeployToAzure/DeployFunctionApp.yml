# --------------------------------------------------------------------------------
# Pipeline to deploy Azure Function binaries for the Azure Function Example Project
# --------------------------------------------------------------------------------
# TODO: update this file
# TODO: create variable group and use those values
# --------------------------------------------------------------------------------

trigger: none # fire this manually for now
# trigger:
# - main
# trigger:
#   branches:
#     include:
#     - master

variables:
  buildConfiguration: 'Release'
  skipComponentGovernanceDetection: true
  pool: 'ubuntu-latest'
  location: 'eastus'
  resourceGroup: 'COSMOS-DEMO'
  azure-sub: 'AIRS'
  cosmosAccountName: 'cmh-cosmos-demo-acct'
  cosmosDatabaseName: 'cmh-cosmos-demo-db'
  cosmosContainerName: 'products'
  cosmosContainerPartitionKey: '/category'
  ordersContainerName: 'orders'
  ordersPartitionKey: '/customerNumber'
  functionAppName: 'cmh-cosmos-demo'
  infrastructure-arm-template: '$(Pipeline.Workspace)/Infrastructure/cosmosfunctionsdemo.json'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildInfrastructure
    displayName: Build Infrastructure
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '-- configuration Release'

    - task: DotNetCoreCLI@2
      displayName: 'Publish'
      inputs:
        command: publish
        publishWebProjects: false
        zipAfterPublish: true
        projects: '**/*.csproj'
        arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)/code/'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish code artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/code/'
        ArtifactName: 'Code'
        publishLocation: Container                        

- stage: 'Deploy'
  displayName: 'Deploy Stage'
  variables:
  - group: 'Cosmos Demo Variables'
  jobs:
  - deployment: 'Deploy'
    environment: 'Development'
    pool:
      vmImage: $(pool)
    strategy:
     runOnce:
       deploy:
        steps:
          - task: AzureFunctionApp@1
            displayName: 'Deploy functions'
            inputs:
              azureSubscription: 'AIRS'
              appType: functionAppLinux
              appName: $(functionAppName)
              package: $(Pipeline.Workspace)/Code/*.zip
              appSettings: '-cosmosDatabaseName $(cosmosDatabaseName) -cosmosContainerName $(cosmosContainerName) -cosmosConnectionstring $(cosmosConnectionString)'
              
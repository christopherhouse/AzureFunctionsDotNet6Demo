# ------------------------------------------------------------------------------------------------------------------------
# Build for IoT Function App Processor for the Azure Function Example Project
# ------------------------------------------------------------------------------------------------------------------------
# Create a variable group for each environment with these variables:
#   functionAppNameDev: 'lll-funcdemo-func-dev-1'
#   functionAppNameQA: 'lll-funcdemo-func-qa-1'
#   subscriptionName: '<ServiceConnectionName / Subscription Name>'
# ------------------------------------------------------------------------------------------------------------------------

trigger: none # fire this manually for now
# trigger:
#   branches:
#     include:
#     - master

pool:
  vmImage: 'windows-latest'

name: $(date:yyyy).$(date:MM).$(date:dd)$(rev:.r)

variables:
  - group: 'FunctionDemoFunDeployVariables'

stages:
- stage: BuildProgram
  displayName: Build Program
  jobs:
  - job: Build
    displayName: Build

    steps:
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '-- configuration Release'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: publish
        publishWebProjects: false
        zipAfterPublish: true
        projects: '**/*.csproj'
        arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)/code/'

    - task: PublishBuildArtifacts@1
      displayName: 'Save artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/code/'
        ArtifactName: 'Code'
        publishLocation: Container                        

# ------------------------------------------------------------------------------------------------------------------------
- stage: DeployDEV
  displayName: Dev Deploy stage
  dependsOn: BuildProgram
  condition: succeeded()

  jobs:
  - deployment: DeployDev
    displayName: Deploy DEV
    environment: 'DEV'

    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(subscriptionName)'
              appType: functionApp
              appName: $(functionAppNameDev)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'

# ------------------------------------------------------------------------------------------------------------------------
- stage: DeployQA
  displayName: QA Deploy Stage
  dependsOn: DeployDev
  condition: succeeded()

  jobs:
  - deployment: DeployQA
    displayName: Deploy QA
    environment: 'QA'

    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(subscriptionName)'
              appType: functionApp
              appName: $(functionAppNameQA)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
